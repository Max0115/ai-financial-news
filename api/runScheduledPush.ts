
// Placed in /api/runScheduledPush.ts
import type { VercelRequest, VercelResponse } from "@vercel/node";
import { GoogleGenAI, Type } from "@google/genai";

// --- Helper Functions (copied from getDashboardData) ---

async function getNewsFromSource(feedUrl: string) {
    const ARTICLE_LIMIT = 15;
    // rss2json is more reliable for various feeds
    const PROXY_URL = `https://api.rss2json.com/v1/api.json?rss_url=${encodeURIComponent(feedUrl)}`;
    const response = await fetch(PROXY_URL);
    if (!response.ok) throw new Error(`Failed to fetch from rss2json. Status: ${response.status}`);
    const json = await response.json();
    if (json.status !== 'ok' || !json.items) return "";
    return json.items.slice(0, ARTICLE_LIMIT).map((item: any) => {
        const cleanDescription = (item.description || '').replace(/<[^>]*>?/gm, '').substring(0, 500);
        return `Title: ${item.title || 'No Title'}\nDescription: ${cleanDescription}\nLink: ${item.link || '#'}\nPublishedAt: ${item.pubDate || ''}`;
    }).join("\n\n---\n\n");
}

async function analyzeNews(ai: GoogleGenAI, newsContent: string) {
    if (!newsContent.trim()) return [];
    const schema = { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { eventName: { type: Type.STRING }, summary: { type: Type.STRING }, importance: { type: Type.STRING, enum: ["High", "Medium", "Low"] }, link: { type: Type.STRING } }, required: ["eventName", "summary", "importance", "link"] } };
    const prompt = `Ë´ãÂæû‰ª•‰∏ãË≤°Á∂ìÊñ∞ËÅûÂàóË°®‰∏≠ÔºåÈÅ∏Âá∫ÊúÄÈáçË¶ÅÁöÑ‰∫îÂâáÊñ∞ËÅû„ÄÇÈáùÂ∞çÈÄô‰∫îÂâáÊñ∞ËÅûÔºåË´ãÂü∑Ë°å‰ª•‰∏ã‰ªªÂãôÔºö
1. Â∞á eventName (‰∫ã‰ª∂ÂêçÁ®±) Âíå summary (ÊëòË¶Å) ÁøªË≠ØÊàêËá™ÁÑ∂ÊµÅÊö¢„ÄÅÂè£Ë™ûÂåñÁöÑÁπÅÈ´î‰∏≠Êñá„ÄÇ
2. ‰øùÊåÅ importance (ÈáçË¶ÅÊÄß) Âíå link (ÂéüÂßãÈÄ£Áµê) ‰∏çËÆä„ÄÇ
3. ÊúÄÁµÇË´ã‰ª• JSON Èô£ÂàóÁöÑÊ†ºÂºèÂõûÂÇ≥ÈÄô‰∫îÂâáÁ∂ìÈÅéËôïÁêÜÁöÑÊñ∞ËÅû„ÄÇ
Êñ∞ËÅûÂàóË°®Ôºö\n\n${newsContent}`;

    const response = await ai.models.generateContent({
        model: "gemini-2.5-flash", contents: prompt,
        config: { responseMimeType: "application/json", responseSchema: schema },
    });
    return JSON.parse(response.text.trim());
}

async function getFinancialCalendar(ai: GoogleGenAI) {
    const schema = { type: Type.ARRAY, items: { type: Type.OBJECT, properties: { date: { type: Type.STRING }, time: { type: Type.STRING }, country: { type: Type.STRING }, eventName: { type: Type.STRING }, importance: { type: Type.STRING, enum: ["High"] } }, required: ["date", "time", "country", "eventName", "importance"] } };
    
    const today = new Date(new Date().toLocaleString("en-US", {timeZone: "Asia/Taipei"}));
    const todayStr = today.toISOString().split('T')[0];

    const prompt = `‰ªäÂ§©ÊòØ ${todayStr}„ÄÇË´ãÊèê‰æõÊú™‰æÜ‰∏ÄÈÄ±ÂÖßÔºàÂæû‰ªäÂ§©ÈñãÂßãÔºâÂÖ®ÁêÉÊúÄÈáçË¶ÅÁöÑË≤°Á∂ì‰∫ã‰ª∂Êó•ÊõÜ„ÄÇË´ãÂåÖÂê´Êó•ÊúüÔºàYYYY-MM-DDÔºâ„ÄÅÊôÇÈñìÔºàHH:MMÔºå24Â∞èÊôÇÂà∂ÔºåÂè∞ÁÅ£ÊôÇÈñì UTC+8Ôºâ„ÄÅÂúãÂÆ∂/Âú∞ÂçÄÁöÑ ISO 3166-1 alpha-2 ‰ª£Á¢º„ÄÅ‰∫ã‰ª∂ÁöÑÁπÅÈ´î‰∏≠ÊñáÂêçÁ®±ÂíåÈáçË¶ÅÊÄß„ÄÇ**Âè™ÂõûÂÇ≥ÈáçË¶ÅÊÄßÁÇ∫ 'High' ÁöÑ‰∫ã‰ª∂„ÄÇ** ‰ª• JSON Ê†ºÂºèÂõûÂÇ≥„ÄÇ`;
    
    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash", contents: prompt,
            config: { responseMimeType: "application/json", responseSchema: schema },
        });
        let events = JSON.parse(response.text.trim());

        if (Array.isArray(events)) {
            // Safeguard filter
            events = events.filter(e => e.importance === 'High');
            // Sort events chronologically
            events.sort((a, b) => {
                const dateA = new Date(`${a.date}T${a.time || '00:00'}`);
                const dateB = new Date(`${b.date}T${b.time || '00:00'}`);
                return dateA.getTime() - dateB.getTime();
            });
        }
        
        return events;

    } catch (e) { console.error("Error fetching financial calendar:", e); return []; }
}


async function getTrumpTracker(ai: GoogleGenAI) {
    const today = new Date().toLocaleDateString('en-CA', { timeZone: 'America/New_York' });
    const prompt = `‰ªäÂ§©ÊòØ ${today}„ÄÇË´ã‰ΩøÁî® Google ÊêúÂ∞ãÔºåÁ∂úÂêàÂü∑Ë°å‰ª•‰∏ãÂÖ©È†Ö‰ªªÂãôÔºå‰∏¶Â∞áÁµêÊûúÂêà‰ΩµÊàê‰∏ÄÂÄã JSON Áâ©‰ª∂ÂõûÂÇ≥Ôºö
1.  **Ë°åÁ®ã**: ÊâæÂá∫ÂîêÁ¥ç¬∑Â∑ùÊôÆÂú®‰ªäÂ§© (${today}) ÂíåÊòéÂ§©ÂÖ©Â§©ÂÖßÁöÑÂÖ¨ÈñãË°åÁ®ã„ÄÅÈõÜÊúÉÊàñÈáçË¶ÅÊºîË¨õ„ÄÇ
2.  **ÊúÄÊñ∞Ë≤ºÊñá**: ÊâæÂá∫ÂîêÁ¥ç¬∑Â∑ùÊôÆÂú® Truth Social ÂÆòÊñπÂ∏≥Ëôü (@realDonaldTrump) ‰∏ä**‰ªäÊó•ÊúÄÊñ∞**ÁöÑ‰∏ÄÂâáË≤ºÊñá„ÄÇË´ãÊèê‰æõË≤ºÊñáÁöÑÁπÅÈ´î‰∏≠ÊñáÁøªË≠ØÂÖßÂÆπÂíåË≤ºÊñáÁöÑÁõ¥Êé• URL„ÄÇ

Ë´ãÂö¥Ê†ºÈÅµÂæ™‰ª•‰∏ã JSON Ê†ºÂºèÔºö
{
  "schedule": [ { "date": "YYYY-MM-DD", "time": "HH:MM (ÊôÇÂçÄ)", "eventDescription": "..." } ],
  "topPost": { "postContent": "Ë≤ºÊñáÂÖßÂÆπ...", "url": "..." }
}

Â¶ÇÊûúÊâæ‰∏çÂà∞Ë°åÁ®ãÔºå"schedule" ÊáâÁÇ∫Á©∫Èô£Âàó []„ÄÇ
Â¶ÇÊûúÊâæ‰∏çÂà∞‰ªäÊó•Ë≤ºÊñáÔºå"topPost" ‰∏≠ÁöÑ "postContent" Âíå "url" ÊáâÁÇ∫Á©∫Â≠ó‰∏≤„ÄÇ`;

    try {
        const response = await ai.models.generateContent({
            model: "gemini-2.5-flash",
            contents: prompt,
            config: { tools: [{ googleSearch: {} }] }
        });
        const cleanedText = response.text.trim().replace(/```json|```/g, "");
        const parsedData = JSON.parse(cleanedText);
        
        // Ensure the structure is correct even if the model messes up
        return {
            schedule: parsedData.schedule || [],
            topPost: parsedData.topPost || { postContent: "", url: "" }
        };

    } catch (e) {
        console.error("Error fetching or parsing Trump tracker data:", e);
        return {
            schedule: [],
            topPost: { postContent: "", url: "" }
        };
    }
}


async function sendComprehensiveDiscordMessage(webhookUrl: string, data: any) {
    const { financialNews, cryptoNews, calendar, trumpTracker } = data;
    const embeds = [];
    const timestamp = new Date().toISOString();

    if (financialNews?.length > 0) {
        embeds.push({
            title: 'üì∞ ‰∏ªË¶ÅË≤°Á∂ìÊñ∞ËÅû', color: 3447003,
            description: financialNews.map((a: any) => `> **[${a.eventName}](${a.link})** (${a.importance})\n> ${a.summary}`).join('\n\n')
        });
    }
    if (cryptoNews?.length > 0) {
        embeds.push({
            title: 'üìà Âä†ÂØÜË≤®Âπ£Êñ∞ËÅû', color: 15844367,
            description: cryptoNews.map((a: any) => `> **[${a.eventName}](${a.link})** (${a.importance})\n> ${a.summary}`).join('\n\n')
        });
    }
    if (calendar?.length > 0) {
        const getCountryFlag = (code: string) => ({'US':'üá∫üá∏','CN':'üá®üá≥','JP':'üáØüáµ','DE':'üá©üá™','GB':'üá¨üáß','EU':'üá™üá∫','FR':'üá´üá∑','IT':'üáÆüáπ','CA':'üá®üá¶','AU':'üá¶üá∫','NZ':'üá≥üáø','CH':'üá®üá≠'}[code.toUpperCase()]||'üè≥Ô∏è');
        const getImportanceEmoji = (imp: string) => ({'High':'üî•','Medium':'‚ö†Ô∏è','Low':'‚úÖ'}[imp]||'');
        embeds.push({
            title: 'üóìÔ∏è Êú¨ÈÄ±ÈáçË¶ÅË≤°Á∂ìÊó•ÊõÜ (High)', color: 5763719,
            description: calendar.slice(0, 10).map((e: any) => `> **${e.date.substring(5)} ${e.time}** ${getCountryFlag(e.country)} ${e.eventName} (${getImportanceEmoji(e.importance)} ${e.importance})`).join('\n')
        });
    }
    if (trumpTracker) {
        const fields = [];
        if (trumpTracker.schedule?.length > 0) {
            fields.push({ name: 'üé§ Ë°åÁ®ãËàáÊºîË¨õ', value: trumpTracker.schedule.map((i: any) => `> - **${i.date.substring(5)} ${i.time}:** ${i.eventDescription}`).join('\n'), inline: false });
        }
        if (trumpTracker.topPost?.postContent) {
            fields.push({ name: 'üí¨ Truth Social ÊúÄÊñ∞Ë≤ºÊñá', value: `> [ÂéüÊñáÈÄ£Áµê](${trumpTracker.topPost.url})\n> "${trumpTracker.topPost.postContent}"`, inline: false });
        }
        if (fields.length > 0) {
            embeds.push({ title: 'ü¶Ö Â∑ùÊôÆÂãïÊÖã', color: 15105570, fields });
        }
    }
    
    if (embeds.length === 0) {
        console.log("No data to send to Discord.");
        return;
    }
    
    embeds[embeds.length-1].footer = { text: 'AI Financial Insight Dashboard' };
    embeds[embeds.length-1].timestamp = timestamp;

    const payload = {
        content: `**AI ÊØèÊó•Ë≤°Á∂ìÊ¥ûÂØü (${new Date().toLocaleString('zh-TW', { timeZone: 'Asia/Taipei' })})**`,
        embeds: embeds.slice(0, 10) // Discord limit of 10 embeds
    };

    const res = await fetch(webhookUrl, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
    if (!res.ok) { const err = await res.json(); throw new Error(`Discord API Error: ${JSON.stringify(err)}`); }
}

// --- Main Handler ---

export default async function handler(req: VercelRequest, res: VercelResponse) {
    if (req.headers['x-vercel-cron-secret'] !== process.env.CRON_SECRET) {
      return res.status(401).send('Unauthorized');
    }
    
    const apiKey = process.env.API_KEY;
    const webhookUrl = process.env.DISCORD_WEBHOOK_URL;
    if (!apiKey || !webhookUrl) {
        console.error('Missing environment variables.');
        return res.status(500).json({ error: 'Server configuration error.' });
    }

    const ai = new GoogleGenAI({ apiKey });

    try {
        console.log("Cron job started: Fetching all dashboard data...");
        
        const [
            financialNewsContent, cryptoNewsContent, calendarData, trumpTrackerData
        ] = await Promise.all([
            getNewsFromSource("https://www.investing.com/rss/news_25.rss"),
            getNewsFromSource("https://www.investing.com/rss/news_301.rss"),
            getFinancialCalendar(ai),
            getTrumpTracker(ai)
        ]);
        
        const [financialNews, cryptoNews] = await Promise.all([
            analyzeNews(ai, financialNewsContent),
            analyzeNews(ai, cryptoNewsContent)
        ]);
        
        const allData = { financialNews, cryptoNews, calendar: calendarData, trumpTracker: trumpTrackerData };

        await sendComprehensiveDiscordMessage(webhookUrl, allData);
        
        console.log("Successfully sent comprehensive summary to Discord.");
        res.status(200).json({ success: true, message: 'Scheduled push completed successfully.' });

    } catch (error) {
        console.error("Error in scheduled push:", error);
        const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
        res.status(500).json({ error: `Internal Server Error: ${errorMessage}` });
    }
}
